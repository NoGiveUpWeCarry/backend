generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id                                       Int                   @id @default(autoincrement())
  email                                    String                @unique
  name                                     String
  nickname                                 String                @unique
  auth_provider                            String
  profile_url                              String?
  role_id                                  Int
  introduce                                String?
  status_id                                Int
  apply_count                              Int?                  @default(0)
  post_count                               Int?                  @default(0)
  push_alert                               Boolean               @default(false)
  following_alert                          Boolean               @default(false)
  project_alert                            Boolean               @default(false)
  created_at                               DateTime              @default(now())
  updated_at                               DateTime              @updatedAt
  password                                 String?
  job_detail                               String?
  ArtistData                               ArtistData[]
  Channel_users                            Channel_users[]
  FeedComments                             FeedComment[]
  FeedCommentLikes                         FeedCommentLikes[]
  FeedLikes                                FeedLike[]
  FeedPosts                                FeedPost[]
  Followed                                 Follows[]             @relation("FollowedUsers")
  Follows                                  Follows[]             @relation("UserFollows")
  Message                                  Message[]
  MyPageProject                            MyPageProject[]
  UserLinks                                MyPageUserLink[]
  Notification_Notification_senderIdToUser Notification[]        @relation("Notification_senderIdToUser")
  Notification_Notification_userIdToUser   Notification[]        @relation("Notification_userIdToUser")
  ProgrammerData                           ProgrammerData?
  ProjectPost                              ProjectPost[]
  ProjectSaves                             ProjectSave[]
  Resume                                   Resume[]
  role                                     Role                  @relation(fields: [role_id], references: [id])
  status                                   Status                @relation(fields: [status_id], references: [id])
  UserApplyProject                         UserApplyProject[]
  UserSkills                               UserSkill[]
  Last_message_status                      Last_message_status[]

  @@index([role_id], map: "User_role_id_fkey")
  @@index([status_id], map: "User_status_id_fkey")
}

model Role {
  id    Int    @id @default(autoincrement())
  name  String @unique
  Users User[]
}

model MyPageProject {
  id                Int                 @id @default(autoincrement())
  user_id           Int
  title             String
  description       String
  created_at        DateTime            @default(now())
  updated_at        DateTime            @updatedAt
  projectProfileUrl String?
  user              User                @relation(fields: [user_id], references: [id])
  ProjectLinks      MyPageProjectLink[]

  @@index([user_id])
}

model MyPageProjectLink {
  id         Int           @id @default(autoincrement())
  project_id Int
  type_id    Int
  url        String
  project    MyPageProject @relation(fields: [project_id], references: [id])
  type       LinkType      @relation(fields: [type_id], references: [id])

  @@index([project_id], map: "ProjectLink_project_id_fkey")
  @@index([type_id], map: "ProjectLink_type_id_fkey")
}

model LinkType {
  id    Int                 @id @default(autoincrement())
  name  String              @unique
  Links MyPageProjectLink[]
}

model ProgrammerData {
  id              Int    @id @default(autoincrement())
  user_id         Int    @unique
  github_username String
  user            User   @relation(fields: [user_id], references: [id])
}

model ArtistData {
  id        Int    @id @default(autoincrement())
  user_id   Int
  music_url String
  user      User   @relation(fields: [user_id], references: [id])

  @@index([user_id], map: "ArtistData_user_id_fkey")
}

model Status {
  id    Int    @id @default(autoincrement())
  name  String
  Users User[]
}

model Resume {
  id            Int     @id @default(autoincrement())
  user_id       Int
  title         String
  detail        String  @db.Text
  portfolio_url String?
  user          User    @relation(fields: [user_id], references: [id])

  @@index([user_id], map: "Resume_user_id_fkey")
}

model Skill {
  id         Int         @id @default(autoincrement())
  name       String      @unique
  UserSkills UserSkill[]
}

model UserSkill {
  id       Int   @id @default(autoincrement())
  user_id  Int
  skill_id Int
  skill    Skill @relation(fields: [skill_id], references: [id])
  user     User  @relation(fields: [user_id], references: [id])

  @@unique([user_id, skill_id])
  @@index([skill_id], map: "UserSkill_skill_id_fkey")
}

model MyPageUserLink {
  id      Int    @id @default(autoincrement())
  user_id Int
  link    String
  user    User   @relation(fields: [user_id], references: [id])

  @@index([user_id], map: "UserLink_user_id_fkey")
}

model Follows {
  id                Int      @id @default(autoincrement())
  following_user_id Int
  followed_user_id  Int
  created_at        DateTime @default(now())
  followed_user     User     @relation("FollowedUsers", fields: [followed_user_id], references: [id])
  following_user    User     @relation("UserFollows", fields: [following_user_id], references: [id])

  @@unique([following_user_id, followed_user_id])
  @@index([followed_user_id], map: "Follows_followed_user_id_fkey")
}

model FeedPost {
  id            Int           @id @default(autoincrement())
  user_id       Int
  title         String
  content       String        @db.Text
  thumbnail_url String?
  created_at    DateTime      @default(now())
  updated_at    DateTime      @updatedAt
  view          Int           @default(0)
  comment_count Int           @default(0)
  like_count    Int           @default(0)
  Comments      FeedComment[]
  Likes         FeedLike[]
  user          User          @relation(fields: [user_id], references: [id])
  Tags          FeedPostTag[]

  @@index([user_id], map: "FeedPost_user_id_fkey")
}

model FeedTag {
  id    Int           @id @default(autoincrement())
  name  String
  Posts FeedPostTag[]
}

model FeedPostTag {
  id      Int      @id @default(autoincrement())
  post_id Int
  tag_id  Int
  post    FeedPost @relation(fields: [post_id], references: [id])
  tag     FeedTag  @relation(fields: [tag_id], references: [id])

  @@unique([post_id, tag_id])
  @@index([tag_id], map: "FeedPostTag_tag_id_fkey")
}

model FeedComment {
  id               Int                @id @default(autoincrement())
  user_id          Int
  post_id          Int
  content          String
  image_url        String?
  created_at       DateTime           @default(now())
  updated_at       DateTime           @updatedAt
  post             FeedPost           @relation(fields: [post_id], references: [id])
  user             User               @relation(fields: [user_id], references: [id])
  FeedCommentLikes FeedCommentLikes[]

  @@index([post_id], map: "FeedComment_post_id_fkey")
  @@index([user_id], map: "FeedComment_user_id_fkey")
}

model FeedLike {
  id      Int      @id @default(autoincrement())
  user_id Int
  post_id Int
  post    FeedPost @relation(fields: [post_id], references: [id])
  user    User     @relation(fields: [user_id], references: [id])

  @@index([post_id], map: "FeedLike_post_id_fkey")
  @@index([user_id], map: "FeedLike_user_id_fkey")
}

model ProjectPost {
  id              Int                 @id @default(autoincrement())
  user_id         Int
  title           String
  content         String              @db.Text
  thumbnail_url   String?
  role            String
  start_date      DateTime
  recruiting      Boolean             @default(true)
  applicant_count Int                 @default(0)
  view            Int                 @default(0)
  saved_count     Int                 @default(0)
  created_at      DateTime            @default(now())
  duration        String
  hub_type        String
  work_type       String
  Details         ProjectDetailRole[]
  user            User                @relation(fields: [user_id], references: [id])
  Tags            ProjectPostTag[]
  Saves           ProjectSave[]
  Applications    UserApplyProject[]

  @@index([user_id], map: "ProjectPost_user_id_fkey")
}

model ProjectSave {
  id         Int         @id @default(autoincrement())
  user_id    Int
  post_id    Int
  created_at DateTime    @default(now())
  post       ProjectPost @relation(fields: [post_id], references: [id])
  user       User        @relation(fields: [user_id], references: [id])

  @@index([post_id], map: "ProjectSave_post_id_fkey")
  @@index([user_id], map: "ProjectSave_user_id_fkey")
}

model ProjectDetailRole {
  id             Int         @id @default(autoincrement())
  post_id        Int
  detail_role_id Int
  detail_role    DetailRole  @relation(fields: [detail_role_id], references: [id])
  post           ProjectPost @relation(fields: [post_id], references: [id])

  @@index([detail_role_id], map: "ProjectDetailRole_detail_role_id_fkey")
  @@index([post_id], map: "ProjectDetailRole_post_id_fkey")
}

model DetailRole {
  id      Int                 @id @default(autoincrement())
  role_id Int
  name    String              @unique
  Details ProjectDetailRole[]
}

model ProjectTag {
  id   Int              @id @default(autoincrement())
  name String           @unique
  Tags ProjectPostTag[]
}

model ProjectPostTag {
  id         Int         @id @default(autoincrement())
  post_id    Int
  tag_id     Int
  created_at DateTime    @default(now())
  post       ProjectPost @relation(fields: [post_id], references: [id])
  tag        ProjectTag  @relation(fields: [tag_id], references: [id])

  @@unique([post_id, tag_id])
  @@index([tag_id], map: "ProjectPostTag_tag_id_fkey")
}

model UserApplyProject {
  id         Int         @id @default(autoincrement())
  user_id    Int
  post_id    Int
  status     String      @default("Pending")
  created_at DateTime    @default(now())
  post       ProjectPost @relation(fields: [post_id], references: [id])
  user       User        @relation(fields: [user_id], references: [id])

  @@unique([user_id, post_id])
  @@index([post_id], map: "UserApplyProject_post_id_fkey")
  @@index([user_id], map: "UserApplyProject_user_id_fkey")
}

model Channel {
  id                  Int                   @id @default(autoincrement())
  title               String                @default("default_channel_title")
  type                String
  thumbnail_url       String?
  active              Boolean               @default(true)
  created_at          DateTime              @default(now())
  Channel_users       Channel_users[]
  Message             Message[]
  Last_message_status Last_message_status[]
}

model Channel_users {
  id         Int      @id @default(autoincrement())
  channel_id Int
  user_id    Int
  joined_at  DateTime @default(now())
  channel    Channel  @relation(fields: [channel_id], references: [id])
  user       User     @relation(fields: [user_id], references: [id])

  @@index([channel_id], map: "Channel_users_channel_id_fkey")
  @@index([user_id], map: "Channel_users_user_id_fkey")
}

model Message {
  id         Int      @id @default(autoincrement())
  user_id    Int
  created_at DateTime @default(now())
  channel_id Int
  content    String
  type       String
  channel    Channel  @relation(fields: [channel_id], references: [id])
  user       User     @relation(fields: [user_id], references: [id])

  read_count          Int                   @default(0)
  Last_message_status Last_message_status[]

  @@index([channel_id], map: "Message_channel_id_fkey")
  @@index([user_id], map: "Message_user_id_fkey")
}

model Last_message_status {
  id              Int     @id @default(autoincrement())
  channel_id      Int
  user_id         Int
  last_message_id Int
  message         Message @relation(fields: [last_message_id], references: [id])
  user            User    @relation(fields: [user_id], references: [id])
  channel         Channel @relation(fields: [channel_id], references: [id])
}

model FeedCommentLikes {
  id          Int         @id @default(autoincrement())
  user_id     Int
  comment_id  Int
  FeedComment FeedComment @relation(fields: [comment_id], references: [id])
  User        User        @relation(fields: [user_id], references: [id])

  @@index([comment_id], map: "FeedCommentLikes_comment_id_fkey")
  @@index([user_id], map: "FeedCommentLikes_user_id_fkey")
}

model online_users {
  id        Int    @id @default(autoincrement())
  client_id String
  user_id   Int
}

model Notification {
  id                               Int      @id @default(autoincrement())
  userId                           Int
  type                             String
  message                          String
  isRead                           Boolean  @default(false)
  createdAt                        DateTime @default(now())
  senderId                         Int
  User_Notification_senderIdToUser User     @relation("Notification_senderIdToUser", fields: [senderId], references: [id])
  User_Notification_userIdToUser   User     @relation("Notification_userIdToUser", fields: [userId], references: [id])

  @@index([senderId], map: "Notification_senderId_fkey")
  @@index([userId], map: "Notification_userId_fkey")
}
