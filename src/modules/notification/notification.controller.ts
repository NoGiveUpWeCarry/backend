import {
  Controller,
  Sse,
  Req,
  UseGuards,
  UseInterceptors,
} from '@nestjs/common';
import { Observable, of } from 'rxjs';
import { filter, map } from 'rxjs/operators';
import { JwtAuthGuard } from '../auth/guards/jwt-auth.guard';
import { NotificationsService } from './notification.service';
import { SseInterceptor } from './Interceptors/notification.interceptor'; // üîπ Ï∂îÍ∞ÄÌïú Interceptor import

@Controller('notifications')
@UseInterceptors(SseInterceptor) // üîπ Interceptor Ï†ÅÏö©
export class NotificationsController {
  constructor(private readonly notificationsService: NotificationsService) {}

  @Sse('stream')
  @UseGuards(JwtAuthGuard)
  streamNotifications(@Req() req): Observable<any> {
    const userId = req.user?.user_id;

    if (!userId) {
      console.error('ÏÇ¨Ïö©Ïûê Ïù∏Ï¶ù Ï†ïÎ≥¥Í∞Ä ÌïÑÏöîÌï©ÎãàÎã§.');
      return of({
        type: 'error',
        message: 'ÏÇ¨Ïö©Ïûê Ïù∏Ï¶ù Ï†ïÎ≥¥Í∞Ä ÌïÑÏöîÌï©ÎãàÎã§.',
        timestamp: new Date().toISOString(),
      });
    }

    req.on('close', () => {
      console.log(`ÏÇ¨Ïö©Ïûê ${userId}ÏôÄÏùò SSE Ïó∞Í≤∞Ïù¥ Ï¢ÖÎ£åÎêòÏóàÏäµÎãàÎã§.`);
    });

    return this.notificationsService.notifications$.asObservable().pipe(
      filter(notification => notification.userId === userId),
      map(notification => ({
        type: notification.type,
        message: notification.message,
        senderNickname: notification.senderNickname,
        senderProfileUrl: notification.senderProfileUrl,
        timestamp: new Date().toISOString(),
      }))
    );
  }
}
