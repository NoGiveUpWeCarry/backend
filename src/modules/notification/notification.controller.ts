import {
  Controller,
  Sse,
  Req,
  UseGuards,
  UseInterceptors,
} from '@nestjs/common';
import { Observable, of } from 'rxjs';
import { filter, map } from 'rxjs/operators';
import { JwtAuthGuard } from '../auth/guards/jwt-auth.guard';
import { NotificationsService } from './notification.service';
import { SseInterceptor } from './Interceptors/notification.interceptor';

@Controller('notifications')
@UseInterceptors(SseInterceptor)
export class NotificationsController {
  constructor(private readonly notificationsService: NotificationsService) {}

  @Sse('stream')
  @UseGuards(JwtAuthGuard)
  streamNotifications(@Req() req): Observable<any> {
    const userId = req.user?.user_id;

    if (!userId) {
      console.error('üö® ÏÇ¨Ïö©Ïûê Ïù∏Ï¶ù Ï†ïÎ≥¥Í∞Ä ÌïÑÏöîÌï©ÎãàÎã§.');
      return of({
        event: 'error', // ‚úÖ Ïù¥Î≤§Ìä∏ Ïù¥Î¶Ñ Ï∂îÍ∞Ä
        data: {
          type: 'error',
          message: 'ÏÇ¨Ïö©Ïûê Ïù∏Ï¶ù Ï†ïÎ≥¥Í∞Ä ÌïÑÏöîÌï©ÎãàÎã§.',
          timestamp: new Date().toISOString(),
        },
      });
    }

    console.log(`‚úÖ SSE Ïó∞Í≤∞ ÏÑ±Í≥µ - ÏÇ¨Ïö©Ïûê ${userId}`);

    req.on('close', () => {
      console.log(`‚ùå ÏÇ¨Ïö©Ïûê ${userId}ÏôÄÏùò SSE Ïó∞Í≤∞ Ï¢ÖÎ£å`);
    });

    return this.notificationsService.notifications$.asObservable().pipe(
      filter(notification => notification.userId === userId),
      map(notification => ({
        event: 'message', // ‚úÖ 'message' Ïù¥Î≤§Ìä∏ Ïù¥Î¶Ñ Ï∂îÍ∞Ä
        data: {
          type: notification.type,
          message: notification.message,
          senderNickname: notification.senderNickname,
          senderProfileUrl: notification.senderProfileUrl,
          timestamp: new Date().toISOString(),
        },
      }))
    );
  }
}
